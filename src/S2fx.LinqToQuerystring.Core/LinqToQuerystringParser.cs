//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2-beta1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2-beta1 LinqToQuerystring.g 2018-03-05 22:34:18

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

 
    using LinqToQuerystring;
    using LinqToQuerystring.Exceptions;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2-beta1")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALIAS", "ALL", "ALLPAGES", "AND", "ANY", "ASC", "ASSIGN", "AVERAGE", "BOOL", "BYTE", "COUNT", "DATETIME", "DAY", "DAYS", "DECIMAL", "DESC", "DOUBLE", "DYNAMICIDENTIFIER", "ENDSWITH", "EQUALS", "ESC_SEQ", "EXPAND", "FILTER", "GREATERTHAN", "GREATERTHANOREQUAL", "GUID", "HEX_DIGIT", "HEX_PAIR", "HOUR", "HOURS", "IDENTIFIER", "IGNORED", "INLINECOUNT", "INT", "LESSTHAN", "LESSTHANOREQUAL", "LONG", "MAX", "MIN", "MINUTE", "MINUTES", "MONTH", "NEWLINE", "NONE", "NOT", "NOTEQUALS", "NULL", "OCTAL_ESC", "OR", "ORDERBY", "SECOND", "SECONDS", "SELECT", "SINGLE", "SKIP", "SPACE", "STARTSWITH", "STRING", "SUBSTRINGOF", "SUM", "TOLOWER", "TOP", "TOUPPER", "UNICODE_ESC", "YEAR", "YEARS", "'&'", "'('", "')'", "','", "'/'", "':'"
	};
	public const int EOF=-1;
	public const int ALIAS=4;
	public const int ALL=5;
	public const int ALLPAGES=6;
	public const int AND=7;
	public const int ANY=8;
	public const int ASC=9;
	public const int ASSIGN=10;
	public const int AVERAGE=11;
	public const int BOOL=12;
	public const int BYTE=13;
	public const int COUNT=14;
	public const int DATETIME=15;
	public const int DAY=16;
	public const int DAYS=17;
	public const int DECIMAL=18;
	public const int DESC=19;
	public const int DOUBLE=20;
	public const int DYNAMICIDENTIFIER=21;
	public const int ENDSWITH=22;
	public const int EQUALS=23;
	public const int ESC_SEQ=24;
	public const int EXPAND=25;
	public const int FILTER=26;
	public const int GREATERTHAN=27;
	public const int GREATERTHANOREQUAL=28;
	public const int GUID=29;
	public const int HEX_DIGIT=30;
	public const int HEX_PAIR=31;
	public const int HOUR=32;
	public const int HOURS=33;
	public const int IDENTIFIER=34;
	public const int IGNORED=35;
	public const int INLINECOUNT=36;
	public const int INT=37;
	public const int LESSTHAN=38;
	public const int LESSTHANOREQUAL=39;
	public const int LONG=40;
	public const int MAX=41;
	public const int MIN=42;
	public const int MINUTE=43;
	public const int MINUTES=44;
	public const int MONTH=45;
	public const int NEWLINE=46;
	public const int NONE=47;
	public const int NOT=48;
	public const int NOTEQUALS=49;
	public const int NULL=50;
	public const int OCTAL_ESC=51;
	public const int OR=52;
	public const int ORDERBY=53;
	public const int SECOND=54;
	public const int SECONDS=55;
	public const int SELECT=56;
	public const int SINGLE=57;
	public const int SKIP=58;
	public const int SPACE=59;
	public const int STARTSWITH=60;
	public const int STRING=61;
	public const int SUBSTRINGOF=62;
	public const int SUM=63;
	public const int TOLOWER=64;
	public const int TOP=65;
	public const int TOUPPER=66;
	public const int UNICODE_ESC=67;
	public const int YEAR=68;
	public const int YEARS=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;

	public LinqToQuerystringParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LinqToQuerystringParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LinqToQuerystringParser.tokenNames; } }
	public override string GrammarFileName { get { return "LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// LinqToQuerystring.g:36:8: public prog : ( param ( '&' ! param )* )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> param1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(36, 25);
		try
		{
			// LinqToQuerystring.g:37:2: ( ( param ( '&' ! param )* )* )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:37:4: ( param ( '&' ! param )* )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(37, 4);
			// LinqToQuerystring.g:37:4: ( param ( '&' ! param )* )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>=EXPAND && LA2_1<=FILTER)||(LA2_1>=IGNORED && LA2_1<=INLINECOUNT)||LA2_1==ORDERBY||LA2_1==SELECT||LA2_1==SKIP||LA2_1==TOP))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:37:5: param ( '&' ! param )*
					{
					DebugLocation(37, 5);
					PushFollow(Follow._param_in_prog72);
					param1=param();
					PopFollow();

					adaptor.AddChild(root_0, param1.Tree);
					DebugLocation(37, 11);
					// LinqToQuerystring.g:37:11: ( '&' ! param )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_1 = input.LA(1);

						if ((LA1_1==70))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// LinqToQuerystring.g:37:12: '&' ! param
							{
							DebugLocation(37, 15);
							char_literal2=(IToken)Match(input,70,Follow._70_in_prog75); 
							DebugLocation(37, 17);
							PushFollow(Follow._param_in_prog78);
							param3=param();
							PopFollow();

							adaptor.AddChild(root_0, param3.Tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(37, 25);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_param();
	partial void LeaveRule_param();
	// $ANTLR start "param"
	// LinqToQuerystring.g:39:1: param : ( orderby | top | skip | filter | select | inlinecount | expand | ignored ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<object, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 2);
		TraceIn("param", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> orderby4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> top5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> skip6 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filter7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> select8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> inlinecount9 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expand10 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> ignored11 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(39, 81);
		try
		{
			// LinqToQuerystring.g:39:7: ( ( orderby | top | skip | filter | select | inlinecount | expand | ignored ) )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:39:9: ( orderby | top | skip | filter | select | inlinecount | expand | ignored )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(39, 9);
			// LinqToQuerystring.g:39:9: ( orderby | top | skip | filter | select | inlinecount | expand | ignored )
			int alt3=8;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case ORDERBY:
				{
				alt3 = 1;
				}
				break;
			case TOP:
				{
				alt3 = 2;
				}
				break;
			case SKIP:
				{
				alt3 = 3;
				}
				break;
			case FILTER:
				{
				alt3 = 4;
				}
				break;
			case SELECT:
				{
				alt3 = 5;
				}
				break;
			case INLINECOUNT:
				{
				alt3 = 6;
				}
				break;
			case EXPAND:
				{
				alt3 = 7;
				}
				break;
			case IGNORED:
				{
				alt3 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// LinqToQuerystring.g:39:10: orderby
				{
				DebugLocation(39, 10);
				PushFollow(Follow._orderby_in_param91);
				orderby4=orderby();
				PopFollow();

				adaptor.AddChild(root_0, orderby4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LinqToQuerystring.g:39:20: top
				{
				DebugLocation(39, 20);
				PushFollow(Follow._top_in_param95);
				top5=top();
				PopFollow();

				adaptor.AddChild(root_0, top5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// LinqToQuerystring.g:39:26: skip
				{
				DebugLocation(39, 26);
				PushFollow(Follow._skip_in_param99);
				skip6=skip();
				PopFollow();

				adaptor.AddChild(root_0, skip6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// LinqToQuerystring.g:39:33: filter
				{
				DebugLocation(39, 33);
				PushFollow(Follow._filter_in_param103);
				filter7=filter();
				PopFollow();

				adaptor.AddChild(root_0, filter7.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// LinqToQuerystring.g:39:42: select
				{
				DebugLocation(39, 42);
				PushFollow(Follow._select_in_param107);
				select8=select();
				PopFollow();

				adaptor.AddChild(root_0, select8.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// LinqToQuerystring.g:39:51: inlinecount
				{
				DebugLocation(39, 51);
				PushFollow(Follow._inlinecount_in_param111);
				inlinecount9=inlinecount();
				PopFollow();

				adaptor.AddChild(root_0, inlinecount9.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// LinqToQuerystring.g:39:65: expand
				{
				DebugLocation(39, 65);
				PushFollow(Follow._expand_in_param115);
				expand10=expand();
				PopFollow();

				adaptor.AddChild(root_0, expand10.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// LinqToQuerystring.g:39:74: ignored
				{
				DebugLocation(39, 74);
				PushFollow(Follow._ignored_in_param119);
				ignored11=ignored();
				PopFollow();

				adaptor.AddChild(root_0, ignored11.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 2);
			LeaveRule("param", 2);
			LeaveRule_param();
		}
		DebugLocation(39, 81);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_skip();
	partial void LeaveRule_skip();
	// $ANTLR start "skip"
	// LinqToQuerystring.g:41:1: skip : SKIP ^ ( INT )+ ;
	[GrammarRule("skip")]
	private AstParserRuleReturnScope<object, IToken> skip()
	{
		EnterRule_skip();
		EnterRule("skip", 3);
		TraceIn("skip", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SKIP12 = default(IToken);
		IToken INT13 = default(IToken);

		object SKIP12_tree = default(object);
		object INT13_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "skip");
		DebugLocation(41, 13);
		try
		{
			// LinqToQuerystring.g:42:2: ( SKIP ^ ( INT )+ )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:42:4: SKIP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(42, 8);
			SKIP12=(IToken)Match(input,SKIP,Follow._SKIP_in_skip130); 
			SKIP12_tree = (object)adaptor.Create(SKIP12);
			root_0 = (object)adaptor.BecomeRoot(SKIP12_tree, root_0);
			DebugLocation(42, 10);
			// LinqToQuerystring.g:42:10: ( INT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==INT))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:42:10: INT
					{
					DebugLocation(42, 10);
					INT13=(IToken)Match(input,INT,Follow._INT_in_skip133); 
					INT13_tree = (object)adaptor.Create(INT13);
					adaptor.AddChild(root_0, INT13_tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("skip", 3);
			LeaveRule("skip", 3);
			LeaveRule_skip();
		}
		DebugLocation(42, 13);
		} finally { DebugExitRule(GrammarFileName, "skip"); }
		return retval;

	}
	// $ANTLR end "skip"

	partial void EnterRule_top();
	partial void LeaveRule_top();
	// $ANTLR start "top"
	// LinqToQuerystring.g:44:1: top : TOP ^ ( INT )+ ;
	[GrammarRule("top")]
	private AstParserRuleReturnScope<object, IToken> top()
	{
		EnterRule_top();
		EnterRule("top", 4);
		TraceIn("top", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TOP14 = default(IToken);
		IToken INT15 = default(IToken);

		object TOP14_tree = default(object);
		object INT15_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "top");
		DebugLocation(44, 12);
		try
		{
			// LinqToQuerystring.g:45:2: ( TOP ^ ( INT )+ )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:45:4: TOP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(45, 7);
			TOP14=(IToken)Match(input,TOP,Follow._TOP_in_top144); 
			TOP14_tree = (object)adaptor.Create(TOP14);
			root_0 = (object)adaptor.BecomeRoot(TOP14_tree, root_0);
			DebugLocation(45, 9);
			// LinqToQuerystring.g:45:9: ( INT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==INT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:45:9: INT
					{
					DebugLocation(45, 9);
					INT15=(IToken)Match(input,INT,Follow._INT_in_top147); 
					INT15_tree = (object)adaptor.Create(INT15);
					adaptor.AddChild(root_0, INT15_tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top", 4);
			LeaveRule("top", 4);
			LeaveRule_top();
		}
		DebugLocation(45, 12);
		} finally { DebugExitRule(GrammarFileName, "top"); }
		return retval;

	}
	// $ANTLR end "top"

	partial void EnterRule_filter();
	partial void LeaveRule_filter();
	// $ANTLR start "filter"
	// LinqToQuerystring.g:47:1: filter : FILTER ^ filterexpression[false] ;
	[GrammarRule("filter")]
	private AstParserRuleReturnScope<object, IToken> filter()
	{
		EnterRule_filter();
		EnterRule("filter", 5);
		TraceIn("filter", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FILTER16 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression17 = default(AstParserRuleReturnScope<object, IToken>);

		object FILTER16_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filter");
		DebugLocation(47, 34);
		try
		{
			// LinqToQuerystring.g:48:2: ( FILTER ^ filterexpression[false] )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:48:4: FILTER ^ filterexpression[false]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(48, 10);
			FILTER16=(IToken)Match(input,FILTER,Follow._FILTER_in_filter158); 
			FILTER16_tree = (object)adaptor.Create(FILTER16);
			root_0 = (object)adaptor.BecomeRoot(FILTER16_tree, root_0);
			DebugLocation(48, 12);
			PushFollow(Follow._filterexpression_in_filter161);
			filterexpression17=filterexpression(false);
			PopFollow();

			adaptor.AddChild(root_0, filterexpression17.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filter", 5);
			LeaveRule("filter", 5);
			LeaveRule_filter();
		}
		DebugLocation(48, 34);
		} finally { DebugExitRule(GrammarFileName, "filter"); }
		return retval;

	}
	// $ANTLR end "filter"

	partial void EnterRule_select();
	partial void LeaveRule_select();
	// $ANTLR start "select"
	// LinqToQuerystring.g:50:1: select : SELECT ^ propertyname[false] ( ',' ! propertyname[false] )* ;
	[GrammarRule("select")]
	private AstParserRuleReturnScope<object, IToken> select()
	{
		EnterRule_select();
		EnterRule("select", 6);
		TraceIn("select", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELECT18 = default(IToken);
		IToken char_literal20 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname19 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname21 = default(AstParserRuleReturnScope<object, IToken>);

		object SELECT18_tree = default(object);
		object char_literal20_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select");
		DebugLocation(50, 58);
		try
		{
			// LinqToQuerystring.g:51:2: ( SELECT ^ propertyname[false] ( ',' ! propertyname[false] )* )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:51:4: SELECT ^ propertyname[false] ( ',' ! propertyname[false] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(51, 10);
			SELECT18=(IToken)Match(input,SELECT,Follow._SELECT_in_select172); 
			SELECT18_tree = (object)adaptor.Create(SELECT18);
			root_0 = (object)adaptor.BecomeRoot(SELECT18_tree, root_0);
			DebugLocation(51, 12);
			PushFollow(Follow._propertyname_in_select175);
			propertyname19=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname19.Tree);
			DebugLocation(51, 32);
			// LinqToQuerystring.g:51:32: ( ',' ! propertyname[false] )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==73))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:51:33: ',' ! propertyname[false]
					{
					DebugLocation(51, 36);
					char_literal20=(IToken)Match(input,73,Follow._73_in_select179); 
					DebugLocation(51, 38);
					PushFollow(Follow._propertyname_in_select182);
					propertyname21=propertyname(false);
					PopFollow();

					adaptor.AddChild(root_0, propertyname21.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select", 6);
			LeaveRule("select", 6);
			LeaveRule_select();
		}
		DebugLocation(51, 58);
		} finally { DebugExitRule(GrammarFileName, "select"); }
		return retval;

	}
	// $ANTLR end "select"

	partial void EnterRule_expand();
	partial void LeaveRule_expand();
	// $ANTLR start "expand"
	// LinqToQuerystring.g:53:1: expand : EXPAND ^ propertyname[false] ( ',' ! propertyname[false] )* ;
	[GrammarRule("expand")]
	private AstParserRuleReturnScope<object, IToken> expand()
	{
		EnterRule_expand();
		EnterRule("expand", 7);
		TraceIn("expand", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EXPAND22 = default(IToken);
		IToken char_literal24 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname23 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname25 = default(AstParserRuleReturnScope<object, IToken>);

		object EXPAND22_tree = default(object);
		object char_literal24_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expand");
		DebugLocation(53, 58);
		try
		{
			// LinqToQuerystring.g:54:2: ( EXPAND ^ propertyname[false] ( ',' ! propertyname[false] )* )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:54:4: EXPAND ^ propertyname[false] ( ',' ! propertyname[false] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(54, 10);
			EXPAND22=(IToken)Match(input,EXPAND,Follow._EXPAND_in_expand197); 
			EXPAND22_tree = (object)adaptor.Create(EXPAND22);
			root_0 = (object)adaptor.BecomeRoot(EXPAND22_tree, root_0);
			DebugLocation(54, 12);
			PushFollow(Follow._propertyname_in_expand200);
			propertyname23=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname23.Tree);
			DebugLocation(54, 32);
			// LinqToQuerystring.g:54:32: ( ',' ! propertyname[false] )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==73))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:54:33: ',' ! propertyname[false]
					{
					DebugLocation(54, 36);
					char_literal24=(IToken)Match(input,73,Follow._73_in_expand204); 
					DebugLocation(54, 38);
					PushFollow(Follow._propertyname_in_expand207);
					propertyname25=propertyname(false);
					PopFollow();

					adaptor.AddChild(root_0, propertyname25.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expand", 7);
			LeaveRule("expand", 7);
			LeaveRule_expand();
		}
		DebugLocation(54, 58);
		} finally { DebugExitRule(GrammarFileName, "expand"); }
		return retval;

	}
	// $ANTLR end "expand"

	partial void EnterRule_inlinecount();
	partial void LeaveRule_inlinecount();
	// $ANTLR start "inlinecount"
	// LinqToQuerystring.g:56:1: inlinecount : ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->);
	[GrammarRule("inlinecount")]
	private AstParserRuleReturnScope<object, IToken> inlinecount()
	{
		EnterRule_inlinecount();
		EnterRule("inlinecount", 8);
		TraceIn("inlinecount", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INLINECOUNT26 = default(IToken);
		IToken ALLPAGES27 = default(IToken);
		IToken INLINECOUNT28 = default(IToken);
		IToken NONE29 = default(IToken);

		object INLINECOUNT26_tree = default(object);
		object ALLPAGES27_tree = default(object);
		object INLINECOUNT28_tree = default(object);
		object NONE29_tree = default(object);
		RewriteRuleITokenStream stream_INLINECOUNT=new RewriteRuleITokenStream(adaptor,"token INLINECOUNT");
		RewriteRuleITokenStream stream_NONE=new RewriteRuleITokenStream(adaptor,"token NONE");
		try { DebugEnterRule(GrammarFileName, "inlinecount");
		DebugLocation(56, 22);
		try
		{
			// LinqToQuerystring.g:57:2: ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->)
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==INLINECOUNT))
			{
				int LA8_2 = input.LA(2);

				if ((LA8_2==ALLPAGES))
				{
					alt8 = 1;
				}
				else if ((LA8_2==NONE))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// LinqToQuerystring.g:57:4: INLINECOUNT ^ ALLPAGES
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(57, 15);
				INLINECOUNT26=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount219); 
				INLINECOUNT26_tree = (object)adaptor.Create(INLINECOUNT26);
				root_0 = (object)adaptor.BecomeRoot(INLINECOUNT26_tree, root_0);
				DebugLocation(57, 17);
				ALLPAGES27=(IToken)Match(input,ALLPAGES,Follow._ALLPAGES_in_inlinecount222); 
				ALLPAGES27_tree = (object)adaptor.Create(ALLPAGES27);
				adaptor.AddChild(root_0, ALLPAGES27_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LinqToQuerystring.g:58:4: INLINECOUNT NONE
				{
				DebugLocation(58, 4);
				INLINECOUNT28=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount227);  
				stream_INLINECOUNT.Add(INLINECOUNT28);

				DebugLocation(58, 16);
				NONE29=(IToken)Match(input,NONE,Follow._NONE_in_inlinecount229);  
				stream_NONE.Add(NONE29);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 58:21: ->
				{
					DebugLocation(58, 23);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inlinecount", 8);
			LeaveRule("inlinecount", 8);
			LeaveRule_inlinecount();
		}
		DebugLocation(58, 22);
		} finally { DebugExitRule(GrammarFileName, "inlinecount"); }
		return retval;

	}
	// $ANTLR end "inlinecount"

	partial void EnterRule_ignored();
	partial void LeaveRule_ignored();
	// $ANTLR start "ignored"
	// LinqToQuerystring.g:60:1: ignored : IGNORED IDENTIFIER -> IGNORED ;
	[GrammarRule("ignored")]
	private AstParserRuleReturnScope<object, IToken> ignored()
	{
		EnterRule_ignored();
		EnterRule("ignored", 9);
		TraceIn("ignored", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IGNORED30 = default(IToken);
		IToken IDENTIFIER31 = default(IToken);

		object IGNORED30_tree = default(object);
		object IDENTIFIER31_tree = default(object);
		RewriteRuleITokenStream stream_IGNORED=new RewriteRuleITokenStream(adaptor,"token IGNORED");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		try { DebugEnterRule(GrammarFileName, "ignored");
		DebugLocation(60, 39);
		try
		{
			// LinqToQuerystring.g:60:9: ( IGNORED IDENTIFIER -> IGNORED )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:60:11: IGNORED IDENTIFIER
			{
			DebugLocation(60, 11);
			IGNORED30=(IToken)Match(input,IGNORED,Follow._IGNORED_in_ignored239);  
			stream_IGNORED.Add(IGNORED30);

			DebugLocation(60, 19);
			IDENTIFIER31=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_ignored241);  
			stream_IDENTIFIER.Add(IDENTIFIER31);



			{
			// AST REWRITE
			// elements: IGNORED
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 60:30: -> IGNORED
			{
				DebugLocation(60, 33);
				adaptor.AddChild(root_0, stream_IGNORED.NextNode());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ignored", 9);
			LeaveRule("ignored", 9);
			LeaveRule_ignored();
		}
		DebugLocation(60, 39);
		} finally { DebugExitRule(GrammarFileName, "ignored"); }
		return retval;

	}
	// $ANTLR end "ignored"

	partial void EnterRule_filterexpression();
	partial void LeaveRule_filterexpression();
	// $ANTLR start "filterexpression"
	// LinqToQuerystring.g:62:1: filterexpression[bool subquery] : orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )* ;
	[GrammarRule("filterexpression")]
	private AstParserRuleReturnScope<object, IToken> filterexpression(bool subquery)
	{
		EnterRule_filterexpression();
		EnterRule("filterexpression", 10);
		TraceIn("filterexpression", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE33 = default(IToken);
		IToken OR34 = default(IToken);
		IToken SPACE35 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orexpression32 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orexpression36 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE33_tree = default(object);
		object OR34_tree = default(object);
		object SPACE35_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filterexpression");
		DebugLocation(62, 69);
		try
		{
			// LinqToQuerystring.g:63:2: ( orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )* )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:63:4: orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(63, 4);
			PushFollow(Follow._orexpression_in_filterexpression255);
			orexpression32=orexpression(subquery);
			PopFollow();

			adaptor.AddChild(root_0, orexpression32.Tree);
			DebugLocation(63, 27);
			// LinqToQuerystring.g:63:27: ( SPACE ! OR ^ SPACE ! orexpression[subquery] )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==SPACE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:63:28: SPACE ! OR ^ SPACE ! orexpression[subquery]
					{
					DebugLocation(63, 33);
					SPACE33=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression259); 
					DebugLocation(63, 37);
					OR34=(IToken)Match(input,OR,Follow._OR_in_filterexpression262); 
					OR34_tree = (object)adaptor.Create(OR34);
					root_0 = (object)adaptor.BecomeRoot(OR34_tree, root_0);
					DebugLocation(63, 44);
					SPACE35=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression265); 
					DebugLocation(63, 46);
					PushFollow(Follow._orexpression_in_filterexpression268);
					orexpression36=orexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, orexpression36.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filterexpression", 10);
			LeaveRule("filterexpression", 10);
			LeaveRule_filterexpression();
		}
		DebugLocation(63, 69);
		} finally { DebugExitRule(GrammarFileName, "filterexpression"); }
		return retval;

	}
	// $ANTLR end "filterexpression"

	partial void EnterRule_orexpression();
	partial void LeaveRule_orexpression();
	// $ANTLR start "orexpression"
	// LinqToQuerystring.g:65:1: orexpression[bool subquery] : andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )* ;
	[GrammarRule("orexpression")]
	private AstParserRuleReturnScope<object, IToken> orexpression(bool subquery)
	{
		EnterRule_orexpression();
		EnterRule("orexpression", 11);
		TraceIn("orexpression", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE38 = default(IToken);
		IToken AND39 = default(IToken);
		IToken SPACE40 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andexpression37 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andexpression41 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE38_tree = default(object);
		object AND39_tree = default(object);
		object SPACE40_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orexpression");
		DebugLocation(65, 72);
		try
		{
			// LinqToQuerystring.g:66:2: ( andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )* )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:66:4: andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(66, 4);
			PushFollow(Follow._andexpression_in_orexpression282);
			andexpression37=andexpression(subquery);
			PopFollow();

			adaptor.AddChild(root_0, andexpression37.Tree);
			DebugLocation(66, 28);
			// LinqToQuerystring.g:66:28: ( SPACE ! AND ^ SPACE ! andexpression[subquery] )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==SPACE))
				{
					int LA10_2 = input.LA(2);

					if ((LA10_2==AND))
					{
						alt10 = 1;
					}


				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:66:29: SPACE ! AND ^ SPACE ! andexpression[subquery]
					{
					DebugLocation(66, 34);
					SPACE38=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression286); 
					DebugLocation(66, 39);
					AND39=(IToken)Match(input,AND,Follow._AND_in_orexpression289); 
					AND39_tree = (object)adaptor.Create(AND39);
					root_0 = (object)adaptor.BecomeRoot(AND39_tree, root_0);
					DebugLocation(66, 46);
					SPACE40=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression292); 
					DebugLocation(66, 48);
					PushFollow(Follow._andexpression_in_orexpression295);
					andexpression41=andexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, andexpression41.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orexpression", 11);
			LeaveRule("orexpression", 11);
			LeaveRule_orexpression();
		}
		DebugLocation(66, 72);
		} finally { DebugExitRule(GrammarFileName, "orexpression"); }
		return retval;

	}
	// $ANTLR end "orexpression"

	partial void EnterRule_andexpression();
	partial void LeaveRule_andexpression();
	// $ANTLR start "andexpression"
	// LinqToQuerystring.g:68:1: andexpression[bool subquery] : ( NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) | ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) );
	[GrammarRule("andexpression")]
	private AstParserRuleReturnScope<object, IToken> andexpression(bool subquery)
	{
		EnterRule_andexpression();
		EnterRule("andexpression", 12);
		TraceIn("andexpression", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT42 = default(IToken);
		IToken SPACE43 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken char_literal46 = default(IToken);
		IToken char_literal48 = default(IToken);
		IToken char_literal50 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression45 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression47 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression49 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression51 = default(AstParserRuleReturnScope<object, IToken>);

		object NOT42_tree = default(object);
		object SPACE43_tree = default(object);
		object char_literal44_tree = default(object);
		object char_literal46_tree = default(object);
		object char_literal48_tree = default(object);
		object char_literal50_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andexpression");
		DebugLocation(68, 69);
		try
		{
			// LinqToQuerystring.g:69:2: ( NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) | ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==NOT))
			{
				alt13 = 1;
			}
			else if (((LA13_1>=BOOL && LA13_1<=BYTE)||(LA13_1>=DATETIME && LA13_1<=DECIMAL)||(LA13_1>=DOUBLE && LA13_1<=ENDSWITH)||LA13_1==GUID||(LA13_1>=HOUR && LA13_1<=IDENTIFIER)||LA13_1==INT||LA13_1==LONG||(LA13_1>=MINUTE && LA13_1<=MONTH)||LA13_1==NULL||(LA13_1>=SECOND && LA13_1<=SECONDS)||LA13_1==SINGLE||(LA13_1>=STARTSWITH && LA13_1<=SUBSTRINGOF)||LA13_1==TOLOWER||LA13_1==TOUPPER||(LA13_1>=YEAR && LA13_1<=YEARS)||LA13_1==71))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// LinqToQuerystring.g:69:4: NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(69, 7);
				NOT42=(IToken)Match(input,NOT,Follow._NOT_in_andexpression309); 
				NOT42_tree = (object)adaptor.Create(NOT42);
				root_0 = (object)adaptor.BecomeRoot(NOT42_tree, root_0);
				DebugLocation(69, 9);
				SPACE43=(IToken)Match(input,SPACE,Follow._SPACE_in_andexpression312); 
				SPACE43_tree = (object)adaptor.Create(SPACE43);
				adaptor.AddChild(root_0, SPACE43_tree);
				DebugLocation(69, 15);
				// LinqToQuerystring.g:69:15: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==71))
				{
					alt11 = 1;
				}
				else if (((LA11_1>=BOOL && LA11_1<=BYTE)||(LA11_1>=DATETIME && LA11_1<=DECIMAL)||(LA11_1>=DOUBLE && LA11_1<=ENDSWITH)||LA11_1==GUID||(LA11_1>=HOUR && LA11_1<=IDENTIFIER)||LA11_1==INT||LA11_1==LONG||(LA11_1>=MINUTE && LA11_1<=MONTH)||LA11_1==NULL||(LA11_1>=SECOND && LA11_1<=SECONDS)||LA11_1==SINGLE||(LA11_1>=STARTSWITH && LA11_1<=SUBSTRINGOF)||LA11_1==TOLOWER||LA11_1==TOUPPER||(LA11_1>=YEAR && LA11_1<=YEARS)))
				{
					alt11 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:69:16: '(' filterexpression[subquery] ')'
					{
					DebugLocation(69, 16);
					char_literal44=(IToken)Match(input,71,Follow._71_in_andexpression315); 
					char_literal44_tree = (object)adaptor.Create(char_literal44);
					adaptor.AddChild(root_0, char_literal44_tree);
					DebugLocation(69, 20);
					PushFollow(Follow._filterexpression_in_andexpression317);
					filterexpression45=filterexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, filterexpression45.Tree);
					DebugLocation(69, 47);
					char_literal46=(IToken)Match(input,72,Follow._72_in_andexpression320); 
					char_literal46_tree = (object)adaptor.Create(char_literal46);
					adaptor.AddChild(root_0, char_literal46_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// LinqToQuerystring.g:69:53: booleanexpression[subquery]
					{
					DebugLocation(69, 53);
					PushFollow(Follow._booleanexpression_in_andexpression324);
					booleanexpression47=booleanexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, booleanexpression47.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LinqToQuerystring.g:70:4: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(70, 4);
				// LinqToQuerystring.g:70:4: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==71))
				{
					alt12 = 1;
				}
				else if (((LA12_1>=BOOL && LA12_1<=BYTE)||(LA12_1>=DATETIME && LA12_1<=DECIMAL)||(LA12_1>=DOUBLE && LA12_1<=ENDSWITH)||LA12_1==GUID||(LA12_1>=HOUR && LA12_1<=IDENTIFIER)||LA12_1==INT||LA12_1==LONG||(LA12_1>=MINUTE && LA12_1<=MONTH)||LA12_1==NULL||(LA12_1>=SECOND && LA12_1<=SECONDS)||LA12_1==SINGLE||(LA12_1>=STARTSWITH && LA12_1<=SUBSTRINGOF)||LA12_1==TOLOWER||LA12_1==TOUPPER||(LA12_1>=YEAR && LA12_1<=YEARS)))
				{
					alt12 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:70:5: '(' filterexpression[subquery] ')'
					{
					DebugLocation(70, 5);
					char_literal48=(IToken)Match(input,71,Follow._71_in_andexpression332); 
					char_literal48_tree = (object)adaptor.Create(char_literal48);
					adaptor.AddChild(root_0, char_literal48_tree);
					DebugLocation(70, 9);
					PushFollow(Follow._filterexpression_in_andexpression334);
					filterexpression49=filterexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, filterexpression49.Tree);
					DebugLocation(70, 36);
					char_literal50=(IToken)Match(input,72,Follow._72_in_andexpression337); 
					char_literal50_tree = (object)adaptor.Create(char_literal50);
					adaptor.AddChild(root_0, char_literal50_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// LinqToQuerystring.g:70:42: booleanexpression[subquery]
					{
					DebugLocation(70, 42);
					PushFollow(Follow._booleanexpression_in_andexpression341);
					booleanexpression51=booleanexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, booleanexpression51.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andexpression", 12);
			LeaveRule("andexpression", 12);
			LeaveRule_andexpression();
		}
		DebugLocation(70, 69);
		} finally { DebugExitRule(GrammarFileName, "andexpression"); }
		return retval;

	}
	// $ANTLR end "andexpression"

	partial void EnterRule_booleanexpression();
	partial void LeaveRule_booleanexpression();
	// $ANTLR start "booleanexpression"
	// LinqToQuerystring.g:72:1: booleanexpression[bool subquery] : atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) ;
	[GrammarRule("booleanexpression")]
	private AstParserRuleReturnScope<object, IToken> booleanexpression(bool subquery)
	{
		EnterRule_booleanexpression();
		EnterRule("booleanexpression", 13);
		TraceIn("booleanexpression", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken SPACE52 = default(IToken);
		IToken SPACE53 = default(IToken);
		AstParserRuleReturnScope<object, IToken> atom1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom2 = default(AstParserRuleReturnScope<object, IToken>);

		object op_tree = default(object);
		object SPACE52_tree = default(object);
		object SPACE53_tree = default(object);
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_NOTEQUALS=new RewriteRuleITokenStream(adaptor,"token NOTEQUALS");
		RewriteRuleITokenStream stream_GREATERTHAN=new RewriteRuleITokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleITokenStream stream_GREATERTHANOREQUAL=new RewriteRuleITokenStream(adaptor,"token GREATERTHANOREQUAL");
		RewriteRuleITokenStream stream_LESSTHAN=new RewriteRuleITokenStream(adaptor,"token LESSTHAN");
		RewriteRuleITokenStream stream_LESSTHANOREQUAL=new RewriteRuleITokenStream(adaptor,"token LESSTHANOREQUAL");
		RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
		try { DebugEnterRule(GrammarFileName, "booleanexpression");
		DebugLocation(72, 3);
		try
		{
			// LinqToQuerystring.g:73:2: (atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:73:4: atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
			{
			DebugLocation(73, 9);
			PushFollow(Follow._atom_in_booleanexpression357);
			atom1=atom(subquery);
			PopFollow();

			stream_atom.Add(atom1.Tree);
			DebugLocation(73, 25);
			// LinqToQuerystring.g:73:25: ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==SPACE))
			{
				int LA15_2 = input.LA(2);

				if ((LA15_2==AND||LA15_2==OR))
				{
					alt15 = 2;
				}
				else if ((LA15_2==EQUALS||(LA15_2>=GREATERTHAN && LA15_2<=GREATERTHANOREQUAL)||(LA15_2>=LESSTHAN && LA15_2<=LESSTHANOREQUAL)||LA15_2==NOTEQUALS))
				{
					alt15 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA15_1==EOF||(LA15_1>=EXPAND && LA15_1<=FILTER)||(LA15_1>=IGNORED && LA15_1<=INLINECOUNT)||LA15_1==ORDERBY||LA15_1==SELECT||LA15_1==SKIP||LA15_1==TOP||LA15_1==70||LA15_1==72))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// LinqToQuerystring.g:74:4: SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery]
				{
				DebugLocation(74, 4);
				SPACE52=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression365);  
				stream_SPACE.Add(SPACE52);

				DebugLocation(74, 10);
				// LinqToQuerystring.g:74:10: (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL )
				int alt14=6;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				switch (input.LA(1))
				{
				case EQUALS:
					{
					alt14 = 1;
					}
					break;
				case NOTEQUALS:
					{
					alt14 = 2;
					}
					break;
				case GREATERTHAN:
					{
					alt14 = 3;
					}
					break;
				case GREATERTHANOREQUAL:
					{
					alt14 = 4;
					}
					break;
				case LESSTHAN:
					{
					alt14 = 5;
					}
					break;
				case LESSTHANOREQUAL:
					{
					alt14 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:74:11: op= EQUALS
					{
					DebugLocation(74, 13);
					op=(IToken)Match(input,EQUALS,Follow._EQUALS_in_booleanexpression370);  
					stream_EQUALS.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// LinqToQuerystring.g:74:23: op= NOTEQUALS
					{
					DebugLocation(74, 25);
					op=(IToken)Match(input,NOTEQUALS,Follow._NOTEQUALS_in_booleanexpression376);  
					stream_NOTEQUALS.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// LinqToQuerystring.g:74:38: op= GREATERTHAN
					{
					DebugLocation(74, 40);
					op=(IToken)Match(input,GREATERTHAN,Follow._GREATERTHAN_in_booleanexpression382);  
					stream_GREATERTHAN.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// LinqToQuerystring.g:74:55: op= GREATERTHANOREQUAL
					{
					DebugLocation(74, 57);
					op=(IToken)Match(input,GREATERTHANOREQUAL,Follow._GREATERTHANOREQUAL_in_booleanexpression388);  
					stream_GREATERTHANOREQUAL.Add(op);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// LinqToQuerystring.g:74:79: op= LESSTHAN
					{
					DebugLocation(74, 81);
					op=(IToken)Match(input,LESSTHAN,Follow._LESSTHAN_in_booleanexpression394);  
					stream_LESSTHAN.Add(op);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// LinqToQuerystring.g:74:93: op= LESSTHANOREQUAL
					{
					DebugLocation(74, 95);
					op=(IToken)Match(input,LESSTHANOREQUAL,Follow._LESSTHANOREQUAL_in_booleanexpression400);  
					stream_LESSTHANOREQUAL.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(74, 113);
				SPACE53=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression403);  
				stream_SPACE.Add(SPACE53);

				DebugLocation(74, 124);
				PushFollow(Follow._atom_in_booleanexpression407);
				atom2=atom(subquery);
				PopFollow();

				stream_atom.Add(atom2.Tree);


				{
				// AST REWRITE
				// elements: op, atom1, atom2
				// token labels: op
				// rule labels: atom1, atom2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_atom1=new RewriteRuleSubtreeStream(adaptor,"rule atom1",atom1!=null?atom1.Tree:null);
				RewriteRuleSubtreeStream stream_atom2=new RewriteRuleSubtreeStream(adaptor,"rule atom2",atom2!=null?atom2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 75:4: -> ^( $op $atom1 $atom2)
				{
					DebugLocation(75, 7);
					// LinqToQuerystring.g:75:7: ^( $op $atom1 $atom2)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(75, 10);
					root_1 = (object)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

					DebugLocation(75, 14);
					adaptor.AddChild(root_1, stream_atom1.NextTree());
					DebugLocation(75, 21);
					adaptor.AddChild(root_1, stream_atom2.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LinqToQuerystring.g:76:5: 
				{

				{
				// AST REWRITE
				// elements: EQUALS, atom1
				// token labels: 
				// rule labels: atom1, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_atom1=new RewriteRuleSubtreeStream(adaptor,"rule atom1",atom1!=null?atom1.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 76:5: -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
				{
					DebugLocation(76, 8);
					// LinqToQuerystring.g:76:8: ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(76, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EQUALS, "eq"), root_1);

					DebugLocation(76, 24);
					adaptor.AddChild(root_1, stream_atom1.NextTree());
					DebugLocation(76, 30);
					adaptor.AddChild(root_1, (object)adaptor.Create(BOOL, "true"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("booleanexpression", 13);
			LeaveRule("booleanexpression", 13);
			LeaveRule_booleanexpression();
		}
		DebugLocation(77, 3);
		} finally { DebugExitRule(GrammarFileName, "booleanexpression"); }
		return retval;

	}
	// $ANTLR end "booleanexpression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// LinqToQuerystring.g:79:1: atom[bool subquery] : ( functioncall[subquery] | constant | accessor[subquery] );
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<object, IToken> atom(bool subquery)
	{
		EnterRule_atom();
		EnterRule("atom", 14);
		TraceIn("atom", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> functioncall54 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constant55 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> accessor56 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(79, 21);
		try
		{
			// LinqToQuerystring.g:80:2: ( functioncall[subquery] | constant | accessor[subquery] )
			int alt16=3;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case DAY:
			case DAYS:
			case ENDSWITH:
			case HOUR:
			case HOURS:
			case MINUTE:
			case MINUTES:
			case MONTH:
			case SECOND:
			case SECONDS:
			case STARTSWITH:
			case SUBSTRINGOF:
			case TOLOWER:
			case TOUPPER:
			case YEAR:
			case YEARS:
				{
				alt16 = 1;
				}
				break;
			case BOOL:
			case BYTE:
			case DATETIME:
			case DECIMAL:
			case DOUBLE:
			case GUID:
			case INT:
			case LONG:
			case NULL:
			case SINGLE:
			case STRING:
				{
				alt16 = 2;
				}
				break;
			case DYNAMICIDENTIFIER:
			case IDENTIFIER:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// LinqToQuerystring.g:80:4: functioncall[subquery]
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(80, 4);
				PushFollow(Follow._functioncall_in_atom459);
				functioncall54=functioncall(subquery);
				PopFollow();

				adaptor.AddChild(root_0, functioncall54.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LinqToQuerystring.g:81:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(81, 4);
				PushFollow(Follow._constant_in_atom465);
				constant55=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant55.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// LinqToQuerystring.g:82:4: accessor[subquery]
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(82, 4);
				PushFollow(Follow._accessor_in_atom470);
				accessor56=accessor(subquery);
				PopFollow();

				adaptor.AddChild(root_0, accessor56.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 14);
			LeaveRule("atom", 14);
			LeaveRule_atom();
		}
		DebugLocation(82, 21);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_functioncall();
	partial void LeaveRule_functioncall();
	// $ANTLR start "functioncall"
	// LinqToQuerystring.g:84:1: functioncall[bool subquery] : function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')' ;
	[GrammarRule("functioncall")]
	private AstParserRuleReturnScope<object, IToken> functioncall(bool subquery)
	{
		EnterRule_functioncall();
		EnterRule("functioncall", 15);
		TraceIn("functioncall", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal58 = default(IToken);
		IToken char_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		AstParserRuleReturnScope<object, IToken> function57 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom59 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom61 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal58_tree = default(object);
		object char_literal60_tree = default(object);
		object char_literal62_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functioncall");
		DebugLocation(84, 57);
		try
		{
			// LinqToQuerystring.g:85:2: ( function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')' )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:85:4: function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(85, 12);
			PushFollow(Follow._function_in_functioncall482);
			function57=function();
			PopFollow();

			root_0 = (object)adaptor.BecomeRoot(function57.Tree, root_0);
			DebugLocation(85, 14);
			char_literal58=(IToken)Match(input,71,Follow._71_in_functioncall485); 
			char_literal58_tree = (object)adaptor.Create(char_literal58);
			adaptor.AddChild(root_0, char_literal58_tree);
			DebugLocation(85, 18);
			PushFollow(Follow._atom_in_functioncall487);
			atom59=atom(subquery);
			PopFollow();

			adaptor.AddChild(root_0, atom59.Tree);
			DebugLocation(85, 33);
			// LinqToQuerystring.g:85:33: ( ',' atom[subquery] )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==73))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:85:34: ',' atom[subquery]
					{
					DebugLocation(85, 34);
					char_literal60=(IToken)Match(input,73,Follow._73_in_functioncall491); 
					char_literal60_tree = (object)adaptor.Create(char_literal60);
					adaptor.AddChild(root_0, char_literal60_tree);
					DebugLocation(85, 38);
					PushFollow(Follow._atom_in_functioncall493);
					atom61=atom(subquery);
					PopFollow();

					adaptor.AddChild(root_0, atom61.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }

			DebugLocation(85, 55);
			char_literal62=(IToken)Match(input,72,Follow._72_in_functioncall498); 
			char_literal62_tree = (object)adaptor.Create(char_literal62);
			adaptor.AddChild(root_0, char_literal62_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall", 15);
			LeaveRule("functioncall", 15);
			LeaveRule_functioncall();
		}
		DebugLocation(85, 57);
		} finally { DebugExitRule(GrammarFileName, "functioncall"); }
		return retval;

	}
	// $ANTLR end "functioncall"

	partial void EnterRule_accessor();
	partial void LeaveRule_accessor();
	// $ANTLR start "accessor"
	// LinqToQuerystring.g:87:1: accessor[bool subquery] : ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )? ;
	[GrammarRule("accessor")]
	private AstParserRuleReturnScope<object, IToken> accessor(bool subquery)
	{
		EnterRule_accessor();
		EnterRule("accessor", 16);
		TraceIn("accessor", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken func = default(IToken);
		IToken id = default(IToken);
		IToken char_literal64 = default(IToken);
		IToken char_literal65 = default(IToken);
		IToken char_literal66 = default(IToken);
		IToken SPACE67 = default(IToken);
		IToken char_literal69 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname63 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression68 = default(AstParserRuleReturnScope<object, IToken>);

		object func_tree = default(object);
		object id_tree = default(object);
		object char_literal64_tree = default(object);
		object char_literal65_tree = default(object);
		object char_literal66_tree = default(object);
		object SPACE67_tree = default(object);
		object char_literal69_tree = default(object);
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
		RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
		RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
		RewriteRuleITokenStream stream_MAX=new RewriteRuleITokenStream(adaptor,"token MAX");
		RewriteRuleITokenStream stream_MIN=new RewriteRuleITokenStream(adaptor,"token MIN");
		RewriteRuleITokenStream stream_SUM=new RewriteRuleITokenStream(adaptor,"token SUM");
		RewriteRuleITokenStream stream_AVERAGE=new RewriteRuleITokenStream(adaptor,"token AVERAGE");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		RewriteRuleSubtreeStream stream_filterexpression=new RewriteRuleSubtreeStream(adaptor,"rule filterexpression");
		try { DebugEnterRule(GrammarFileName, "accessor");
		DebugLocation(87, 4);
		try
		{
			// LinqToQuerystring.g:87:24: ( ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )? )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:88:3: ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )?
			{
			DebugLocation(88, 3);
			// LinqToQuerystring.g:88:3: ( propertyname[subquery] -> propertyname )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:88:4: propertyname[subquery]
			{
			DebugLocation(88, 4);
			PushFollow(Follow._propertyname_in_accessor510);
			propertyname63=propertyname(subquery);
			PopFollow();

			stream_propertyname.Add(propertyname63.Tree);


			{
			// AST REWRITE
			// elements: propertyname
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 88:27: -> propertyname
			{
				DebugLocation(88, 30);
				adaptor.AddChild(root_0, stream_propertyname.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(88, 44);
			// LinqToQuerystring.g:88:44: ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==74))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// LinqToQuerystring.g:89:4: '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')'
				{
				DebugLocation(89, 4);
				char_literal64=(IToken)Match(input,74,Follow._74_in_accessor523);  
				stream_74.Add(char_literal64);

				DebugLocation(89, 8);
				// LinqToQuerystring.g:89:8: (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE )
				int alt18=7;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				switch (input.LA(1))
				{
				case ANY:
					{
					alt18 = 1;
					}
					break;
				case ALL:
					{
					alt18 = 2;
					}
					break;
				case COUNT:
					{
					alt18 = 3;
					}
					break;
				case MAX:
					{
					alt18 = 4;
					}
					break;
				case MIN:
					{
					alt18 = 5;
					}
					break;
				case SUM:
					{
					alt18 = 6;
					}
					break;
				case AVERAGE:
					{
					alt18 = 7;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:89:9: func= ANY
					{
					DebugLocation(89, 13);
					func=(IToken)Match(input,ANY,Follow._ANY_in_accessor528);  
					stream_ANY.Add(func);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// LinqToQuerystring.g:89:20: func= ALL
					{
					DebugLocation(89, 24);
					func=(IToken)Match(input,ALL,Follow._ALL_in_accessor534);  
					stream_ALL.Add(func);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// LinqToQuerystring.g:89:31: func= COUNT
					{
					DebugLocation(89, 35);
					func=(IToken)Match(input,COUNT,Follow._COUNT_in_accessor540);  
					stream_COUNT.Add(func);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// LinqToQuerystring.g:89:44: func= MAX
					{
					DebugLocation(89, 48);
					func=(IToken)Match(input,MAX,Follow._MAX_in_accessor546);  
					stream_MAX.Add(func);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// LinqToQuerystring.g:89:55: func= MIN
					{
					DebugLocation(89, 59);
					func=(IToken)Match(input,MIN,Follow._MIN_in_accessor552);  
					stream_MIN.Add(func);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// LinqToQuerystring.g:89:66: func= SUM
					{
					DebugLocation(89, 70);
					func=(IToken)Match(input,SUM,Follow._SUM_in_accessor558);  
					stream_SUM.Add(func);


					}
					break;
				case 7:
					DebugEnterAlt(7);
					// LinqToQuerystring.g:89:77: func= AVERAGE
					{
					DebugLocation(89, 81);
					func=(IToken)Match(input,AVERAGE,Follow._AVERAGE_in_accessor564);  
					stream_AVERAGE.Add(func);


					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(90, 4);
				char_literal65=(IToken)Match(input,71,Follow._71_in_accessor571);  
				stream_71.Add(char_literal65);

				DebugLocation(90, 8);
				// LinqToQuerystring.g:90:8: ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) )
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==IDENTIFIER))
				{
					alt19 = 1;
				}
				else if ((LA19_1==72))
				{
					alt19 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:91:5: (id= IDENTIFIER ':' SPACE filterexpression[true] )
					{
					DebugLocation(91, 5);
					// LinqToQuerystring.g:91:5: (id= IDENTIFIER ':' SPACE filterexpression[true] )
					DebugEnterAlt(1);
					// LinqToQuerystring.g:91:6: id= IDENTIFIER ':' SPACE filterexpression[true]
					{
					DebugLocation(91, 8);
					id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_accessor582);  
					stream_IDENTIFIER.Add(id);

					DebugLocation(91, 20);
					char_literal66=(IToken)Match(input,75,Follow._75_in_accessor584);  
					stream_75.Add(char_literal66);

					DebugLocation(91, 24);
					SPACE67=(IToken)Match(input,SPACE,Follow._SPACE_in_accessor586);  
					stream_SPACE.Add(SPACE67);

					DebugLocation(91, 30);
					PushFollow(Follow._filterexpression_in_accessor588);
					filterexpression68=filterexpression(true);
					PopFollow();

					stream_filterexpression.Add(filterexpression68.Tree);

					}



					{
					// AST REWRITE
					// elements: func, accessor, filterexpression
					// token labels: func
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_func=new RewriteRuleITokenStream(adaptor,"token func",func);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 91:54: -> ^( $func $accessor ALIAS[$id] filterexpression )
					{
						DebugLocation(91, 57);
						// LinqToQuerystring.g:91:57: ^( $func $accessor ALIAS[$id] filterexpression )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(91, 60);
						root_1 = (object)adaptor.BecomeRoot(stream_func.NextNode(), root_1);

						DebugLocation(91, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(91, 75);
						adaptor.AddChild(root_1, (object)adaptor.Create(ALIAS, id));
						DebugLocation(91, 86);
						adaptor.AddChild(root_1, stream_filterexpression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// LinqToQuerystring.g:92:7: 
					{

					{
					// AST REWRITE
					// elements: func, accessor
					// token labels: func
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_func=new RewriteRuleITokenStream(adaptor,"token func",func);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 92:7: -> ^( $func $accessor)
					{
						DebugLocation(92, 10);
						// LinqToQuerystring.g:92:10: ^( $func $accessor)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(92, 13);
						root_1 = (object)adaptor.BecomeRoot(stream_func.NextNode(), root_1);

						DebugLocation(92, 19);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(19); }

				DebugLocation(93, 4);
				char_literal69=(IToken)Match(input,72,Follow._72_in_accessor628);  
				stream_72.Add(char_literal69);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor", 16);
			LeaveRule("accessor", 16);
			LeaveRule_accessor();
		}
		DebugLocation(94, 4);
		} finally { DebugExitRule(GrammarFileName, "accessor"); }
		return retval;

	}
	// $ANTLR end "accessor"

	partial void EnterRule_function();
	partial void LeaveRule_function();
	// $ANTLR start "function"
	// LinqToQuerystring.g:96:1: function : ( STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER | TOUPPER | YEAR | YEARS | MONTH | DAY | DAYS | HOUR | HOURS | MINUTE | MINUTES | SECOND | SECONDS );
	[GrammarRule("function")]
	private AstParserRuleReturnScope<object, IToken> function()
	{
		EnterRule_function();
		EnterRule("function", 17);
		TraceIn("function", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set70 = default(IToken);

		object set70_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(96, 147);
		try
		{
			// LinqToQuerystring.g:97:2: ( STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER | TOUPPER | YEAR | YEARS | MONTH | DAY | DAYS | HOUR | HOURS | MINUTE | MINUTES | SECOND | SECONDS )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(97, 2);

			set70=(IToken)input.LT(1);
			if ((input.LA(1)>=DAY && input.LA(1)<=DAYS)||input.LA(1)==ENDSWITH||(input.LA(1)>=HOUR && input.LA(1)<=HOURS)||(input.LA(1)>=MINUTE && input.LA(1)<=MONTH)||(input.LA(1)>=SECOND && input.LA(1)<=SECONDS)||input.LA(1)==STARTSWITH||input.LA(1)==SUBSTRINGOF||input.LA(1)==TOLOWER||input.LA(1)==TOUPPER||(input.LA(1)>=YEAR && input.LA(1)<=YEARS))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set70));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function", 17);
			LeaveRule("function", 17);
			LeaveRule_function();
		}
		DebugLocation(97, 147);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return retval;

	}
	// $ANTLR end "function"

	partial void EnterRule_orderby();
	partial void LeaveRule_orderby();
	// $ANTLR start "orderby"
	// LinqToQuerystring.g:99:1: orderby : ORDERBY ^ orderbylist ;
	[GrammarRule("orderby")]
	private AstParserRuleReturnScope<object, IToken> orderby()
	{
		EnterRule_orderby();
		EnterRule("orderby", 18);
		TraceIn("orderby", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ORDERBY71 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderbylist72 = default(AstParserRuleReturnScope<object, IToken>);

		object ORDERBY71_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby");
		DebugLocation(99, 23);
		try
		{
			// LinqToQuerystring.g:100:2: ( ORDERBY ^ orderbylist )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:100:4: ORDERBY ^ orderbylist
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(100, 11);
			ORDERBY71=(IToken)Match(input,ORDERBY,Follow._ORDERBY_in_orderby715); 
			ORDERBY71_tree = (object)adaptor.Create(ORDERBY71);
			root_0 = (object)adaptor.BecomeRoot(ORDERBY71_tree, root_0);
			DebugLocation(100, 13);
			PushFollow(Follow._orderbylist_in_orderby718);
			orderbylist72=orderbylist();
			PopFollow();

			adaptor.AddChild(root_0, orderbylist72.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby", 18);
			LeaveRule("orderby", 18);
			LeaveRule_orderby();
		}
		DebugLocation(100, 23);
		} finally { DebugExitRule(GrammarFileName, "orderby"); }
		return retval;

	}
	// $ANTLR end "orderby"

	partial void EnterRule_orderbylist();
	partial void LeaveRule_orderbylist();
	// $ANTLR start "orderbylist"
	// LinqToQuerystring.g:102:1: orderbylist : orderpropertyname ( ',' ! orderpropertyname )* ;
	[GrammarRule("orderbylist")]
	private AstParserRuleReturnScope<object, IToken> orderbylist()
	{
		EnterRule_orderbylist();
		EnterRule("orderbylist", 19);
		TraceIn("orderbylist", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal74 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderpropertyname73 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderpropertyname75 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal74_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderbylist");
		DebugLocation(102, 46);
		try
		{
			// LinqToQuerystring.g:103:2: ( orderpropertyname ( ',' ! orderpropertyname )* )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:103:4: orderpropertyname ( ',' ! orderpropertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(103, 4);
			PushFollow(Follow._orderpropertyname_in_orderbylist728);
			orderpropertyname73=orderpropertyname();
			PopFollow();

			adaptor.AddChild(root_0, orderpropertyname73.Tree);
			DebugLocation(103, 22);
			// LinqToQuerystring.g:103:22: ( ',' ! orderpropertyname )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==73))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:103:23: ',' ! orderpropertyname
					{
					DebugLocation(103, 26);
					char_literal74=(IToken)Match(input,73,Follow._73_in_orderbylist731); 
					DebugLocation(103, 28);
					PushFollow(Follow._orderpropertyname_in_orderbylist734);
					orderpropertyname75=orderpropertyname();
					PopFollow();

					adaptor.AddChild(root_0, orderpropertyname75.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderbylist", 19);
			LeaveRule("orderbylist", 19);
			LeaveRule_orderbylist();
		}
		DebugLocation(103, 46);
		} finally { DebugExitRule(GrammarFileName, "orderbylist"); }
		return retval;

	}
	// $ANTLR end "orderbylist"

	partial void EnterRule_orderpropertyname();
	partial void LeaveRule_orderpropertyname();
	// $ANTLR start "orderpropertyname"
	// LinqToQuerystring.g:105:1: orderpropertyname : propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) ) ;
	[GrammarRule("orderpropertyname")]
	private AstParserRuleReturnScope<object, IToken> orderpropertyname()
	{
		EnterRule_orderpropertyname();
		EnterRule("orderpropertyname", 20);
		TraceIn("orderpropertyname", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken SPACE77 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname76 = default(AstParserRuleReturnScope<object, IToken>);

		object op_tree = default(object);
		object SPACE77_tree = default(object);
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
		RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		try { DebugEnterRule(GrammarFileName, "orderpropertyname");
		DebugLocation(105, 3);
		try
		{
			// LinqToQuerystring.g:106:2: ( propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) ) )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:106:4: propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) )
			{
			DebugLocation(106, 4);
			PushFollow(Follow._propertyname_in_orderpropertyname745);
			propertyname76=propertyname(false);
			PopFollow();

			stream_propertyname.Add(propertyname76.Tree);
			DebugLocation(106, 24);
			// LinqToQuerystring.g:106:24: ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) )
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==EOF||(LA23_1>=EXPAND && LA23_1<=FILTER)||(LA23_1>=IGNORED && LA23_1<=INLINECOUNT)||LA23_1==ORDERBY||LA23_1==SELECT||LA23_1==SKIP||LA23_1==TOP||LA23_1==70||LA23_1==73))
			{
				alt23 = 1;
			}
			else if ((LA23_1==SPACE))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// LinqToQuerystring.g:107:4: 
				{

				{
				// AST REWRITE
				// elements: propertyname
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 107:4: -> ^( ASC[\"asc\"] propertyname )
				{
					DebugLocation(107, 7);
					// LinqToQuerystring.g:107:7: ^( ASC[\"asc\"] propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(107, 9);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ASC, "asc"), root_1);

					DebugLocation(107, 20);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LinqToQuerystring.g:108:6: ( SPACE (op= ASC |op= DESC ) )
				{
				DebugLocation(108, 6);
				// LinqToQuerystring.g:108:6: ( SPACE (op= ASC |op= DESC ) )
				DebugEnterAlt(1);
				// LinqToQuerystring.g:108:7: SPACE (op= ASC |op= DESC )
				{
				DebugLocation(108, 7);
				SPACE77=(IToken)Match(input,SPACE,Follow._SPACE_in_orderpropertyname768);  
				stream_SPACE.Add(SPACE77);

				DebugLocation(108, 13);
				// LinqToQuerystring.g:108:13: (op= ASC |op= DESC )
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==ASC))
				{
					alt22 = 1;
				}
				else if ((LA22_1==DESC))
				{
					alt22 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// LinqToQuerystring.g:108:14: op= ASC
					{
					DebugLocation(108, 16);
					op=(IToken)Match(input,ASC,Follow._ASC_in_orderpropertyname773);  
					stream_ASC.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// LinqToQuerystring.g:108:23: op= DESC
					{
					DebugLocation(108, 25);
					op=(IToken)Match(input,DESC,Follow._DESC_in_orderpropertyname779);  
					stream_DESC.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }


				}



				{
				// AST REWRITE
				// elements: op, propertyname
				// token labels: op
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 108:33: -> ^( $op propertyname )
				{
					DebugLocation(108, 36);
					// LinqToQuerystring.g:108:36: ^( $op propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(108, 39);
					root_1 = (object)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

					DebugLocation(108, 42);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderpropertyname", 20);
			LeaveRule("orderpropertyname", 20);
			LeaveRule_orderpropertyname();
		}
		DebugLocation(109, 3);
		} finally { DebugExitRule(GrammarFileName, "orderpropertyname"); }
		return retval;

	}
	// $ANTLR end "orderpropertyname"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// LinqToQuerystring.g:111:1: constant : ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DECIMAL ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^) ;
	[GrammarRule("constant")]
	private AstParserRuleReturnScope<object, IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 21);
		TraceIn("constant", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INT78 = default(IToken);
		IToken BOOL79 = default(IToken);
		IToken STRING80 = default(IToken);
		IToken DATETIME81 = default(IToken);
		IToken LONG82 = default(IToken);
		IToken SINGLE83 = default(IToken);
		IToken DECIMAL84 = default(IToken);
		IToken DOUBLE85 = default(IToken);
		IToken GUID86 = default(IToken);
		IToken BYTE87 = default(IToken);
		IToken NULL88 = default(IToken);

		object INT78_tree = default(object);
		object BOOL79_tree = default(object);
		object STRING80_tree = default(object);
		object DATETIME81_tree = default(object);
		object LONG82_tree = default(object);
		object SINGLE83_tree = default(object);
		object DECIMAL84_tree = default(object);
		object DOUBLE85_tree = default(object);
		object GUID86_tree = default(object);
		object BYTE87_tree = default(object);
		object NULL88_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(111, 109);
		try
		{
			// LinqToQuerystring.g:111:9: ( ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DECIMAL ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^) )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:111:11: ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DECIMAL ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^)
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(111, 11);
			// LinqToQuerystring.g:111:11: ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DECIMAL ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^)
			int alt24=11;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt24 = 1;
				}
				break;
			case BOOL:
				{
				alt24 = 2;
				}
				break;
			case STRING:
				{
				alt24 = 3;
				}
				break;
			case DATETIME:
				{
				alt24 = 4;
				}
				break;
			case LONG:
				{
				alt24 = 5;
				}
				break;
			case SINGLE:
				{
				alt24 = 6;
				}
				break;
			case DECIMAL:
				{
				alt24 = 7;
				}
				break;
			case DOUBLE:
				{
				alt24 = 8;
				}
				break;
			case GUID:
				{
				alt24 = 9;
				}
				break;
			case BYTE:
				{
				alt24 = 10;
				}
				break;
			case NULL:
				{
				alt24 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// LinqToQuerystring.g:111:12: INT ^
				{
				DebugLocation(111, 15);
				INT78=(IToken)Match(input,INT,Follow._INT_in_constant803); 
				INT78_tree = (object)adaptor.Create(INT78);
				root_0 = (object)adaptor.BecomeRoot(INT78_tree, root_0);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LinqToQuerystring.g:111:19: BOOL ^
				{
				DebugLocation(111, 23);
				BOOL79=(IToken)Match(input,BOOL,Follow._BOOL_in_constant808); 
				BOOL79_tree = (object)adaptor.Create(BOOL79);
				root_0 = (object)adaptor.BecomeRoot(BOOL79_tree, root_0);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// LinqToQuerystring.g:111:27: STRING ^
				{
				DebugLocation(111, 33);
				STRING80=(IToken)Match(input,STRING,Follow._STRING_in_constant813); 
				STRING80_tree = (object)adaptor.Create(STRING80);
				root_0 = (object)adaptor.BecomeRoot(STRING80_tree, root_0);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// LinqToQuerystring.g:111:37: DATETIME ^
				{
				DebugLocation(111, 45);
				DATETIME81=(IToken)Match(input,DATETIME,Follow._DATETIME_in_constant818); 
				DATETIME81_tree = (object)adaptor.Create(DATETIME81);
				root_0 = (object)adaptor.BecomeRoot(DATETIME81_tree, root_0);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// LinqToQuerystring.g:111:49: LONG ^
				{
				DebugLocation(111, 53);
				LONG82=(IToken)Match(input,LONG,Follow._LONG_in_constant823); 
				LONG82_tree = (object)adaptor.Create(LONG82);
				root_0 = (object)adaptor.BecomeRoot(LONG82_tree, root_0);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// LinqToQuerystring.g:111:57: SINGLE ^
				{
				DebugLocation(111, 63);
				SINGLE83=(IToken)Match(input,SINGLE,Follow._SINGLE_in_constant828); 
				SINGLE83_tree = (object)adaptor.Create(SINGLE83);
				root_0 = (object)adaptor.BecomeRoot(SINGLE83_tree, root_0);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// LinqToQuerystring.g:111:67: DECIMAL ^
				{
				DebugLocation(111, 74);
				DECIMAL84=(IToken)Match(input,DECIMAL,Follow._DECIMAL_in_constant833); 
				DECIMAL84_tree = (object)adaptor.Create(DECIMAL84);
				root_0 = (object)adaptor.BecomeRoot(DECIMAL84_tree, root_0);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// LinqToQuerystring.g:111:78: DOUBLE ^
				{
				DebugLocation(111, 84);
				DOUBLE85=(IToken)Match(input,DOUBLE,Follow._DOUBLE_in_constant838); 
				DOUBLE85_tree = (object)adaptor.Create(DOUBLE85);
				root_0 = (object)adaptor.BecomeRoot(DOUBLE85_tree, root_0);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// LinqToQuerystring.g:111:88: GUID ^
				{
				DebugLocation(111, 92);
				GUID86=(IToken)Match(input,GUID,Follow._GUID_in_constant843); 
				GUID86_tree = (object)adaptor.Create(GUID86);
				root_0 = (object)adaptor.BecomeRoot(GUID86_tree, root_0);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// LinqToQuerystring.g:111:96: BYTE ^
				{
				DebugLocation(111, 100);
				BYTE87=(IToken)Match(input,BYTE,Follow._BYTE_in_constant848); 
				BYTE87_tree = (object)adaptor.Create(BYTE87);
				root_0 = (object)adaptor.BecomeRoot(BYTE87_tree, root_0);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// LinqToQuerystring.g:111:104: NULL ^
				{
				DebugLocation(111, 108);
				NULL88=(IToken)Match(input,NULL,Follow._NULL_in_constant853); 
				NULL88_tree = (object)adaptor.Create(NULL88);
				root_0 = (object)adaptor.BecomeRoot(NULL88_tree, root_0);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 21);
			LeaveRule("constant", 21);
			LeaveRule_constant();
		}
		DebugLocation(111, 109);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_propertyname();
	partial void LeaveRule_propertyname();
	// $ANTLR start "propertyname"
	// LinqToQuerystring.g:113:1: propertyname[bool subquery] : ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )? ;
	[GrammarRule("propertyname")]
	private AstParserRuleReturnScope<object, IToken> propertyname(bool subquery)
	{
		EnterRule_propertyname();
		EnterRule("propertyname", 22);
		TraceIn("propertyname", 22);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal90 = default(IToken);
		AstParserRuleReturnScope<object, IToken> next = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> identifierpart89 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal90_tree = default(object);
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_identifierpart=new RewriteRuleSubtreeStream(adaptor,"rule identifierpart");
		RewriteRuleSubtreeStream stream_subpropertyname=new RewriteRuleSubtreeStream(adaptor,"rule subpropertyname");
		try { DebugEnterRule(GrammarFileName, "propertyname");
		DebugLocation(113, 108);
		try
		{
			// LinqToQuerystring.g:114:2: ( ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )? )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:114:4: ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )?
			{
			DebugLocation(114, 4);
			// LinqToQuerystring.g:114:4: ( identifierpart[subquery] -> identifierpart )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:114:5: identifierpart[subquery]
			{
			DebugLocation(114, 5);
			PushFollow(Follow._identifierpart_in_propertyname866);
			identifierpart89=identifierpart(subquery);
			PopFollow();

			stream_identifierpart.Add(identifierpart89.Tree);


			{
			// AST REWRITE
			// elements: identifierpart
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 114:30: -> identifierpart
			{
				DebugLocation(114, 33);
				adaptor.AddChild(root_0, stream_identifierpart.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(114, 49);
			// LinqToQuerystring.g:114:49: ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==74))
			{
				int LA25_2 = input.LA(2);

				if ((LA25_2==DYNAMICIDENTIFIER||LA25_2==IDENTIFIER))
				{
					alt25 = 1;
				}
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// LinqToQuerystring.g:114:50: '/' next= subpropertyname[false]
				{
				DebugLocation(114, 50);
				char_literal90=(IToken)Match(input,74,Follow._74_in_propertyname875);  
				stream_74.Add(char_literal90);

				DebugLocation(114, 58);
				PushFollow(Follow._subpropertyname_in_propertyname879);
				next=subpropertyname(false);
				PopFollow();

				stream_subpropertyname.Add(next.Tree);


				{
				// AST REWRITE
				// elements: propertyname, next
				// token labels: 
				// rule labels: next, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_next=new RewriteRuleSubtreeStream(adaptor,"rule next",next!=null?next.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 114:82: -> ^( $propertyname $next)
				{
					DebugLocation(114, 85);
					// LinqToQuerystring.g:114:85: ^( $propertyname $next)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(114, 88);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(114, 102);
					adaptor.AddChild(root_1, stream_next.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyname", 22);
			LeaveRule("propertyname", 22);
			LeaveRule_propertyname();
		}
		DebugLocation(114, 108);
		} finally { DebugExitRule(GrammarFileName, "propertyname"); }
		return retval;

	}
	// $ANTLR end "propertyname"

	partial void EnterRule_subpropertyname();
	partial void LeaveRule_subpropertyname();
	// $ANTLR start "subpropertyname"
	// LinqToQuerystring.g:116:1: subpropertyname[bool subquery] : propertyname[false] ;
	[GrammarRule("subpropertyname")]
	private AstParserRuleReturnScope<object, IToken> subpropertyname(bool subquery)
	{
		EnterRule_subpropertyname();
		EnterRule("subpropertyname", 23);
		TraceIn("subpropertyname", 23);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> propertyname91 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "subpropertyname");
		DebugLocation(116, 22);
		try
		{
			// LinqToQuerystring.g:117:2: ( propertyname[false] )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:117:4: propertyname[false]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(117, 4);
			PushFollow(Follow._propertyname_in_subpropertyname902);
			propertyname91=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname91.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subpropertyname", 23);
			LeaveRule("subpropertyname", 23);
			LeaveRule_subpropertyname();
		}
		DebugLocation(117, 22);
		} finally { DebugExitRule(GrammarFileName, "subpropertyname"); }
		return retval;

	}
	// $ANTLR end "subpropertyname"

	partial void EnterRule_identifierpart();
	partial void LeaveRule_identifierpart();
	// $ANTLR start "identifierpart"
	// LinqToQuerystring.g:119:1: identifierpart[bool subquery] : (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER ) ;
	[GrammarRule("identifierpart")]
	private AstParserRuleReturnScope<object, IToken> identifierpart(bool subquery)
	{
		EnterRule_identifierpart();
		EnterRule("identifierpart", 24);
		TraceIn("identifierpart", 24);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken DYNAMICIDENTIFIER92 = default(IToken);

		object id_tree = default(object);
		object DYNAMICIDENTIFIER92_tree = default(object);
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_DYNAMICIDENTIFIER=new RewriteRuleITokenStream(adaptor,"token DYNAMICIDENTIFIER");
		try { DebugEnterRule(GrammarFileName, "identifierpart");
		DebugLocation(119, 43);
		try
		{
			// LinqToQuerystring.g:120:2: ( (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER ) )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:120:4: (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER )
			{
			DebugLocation(120, 4);
			// LinqToQuerystring.g:120:4: (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER )
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==IDENTIFIER))
			{
				alt26 = 1;
			}
			else if ((LA26_1==DYNAMICIDENTIFIER))
			{
				alt26 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// LinqToQuerystring.g:120:5: id= IDENTIFIER
				{
				DebugLocation(120, 7);
				id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifierpart917);  
				stream_IDENTIFIER.Add(id);



				{
				// AST REWRITE
				// elements: IDENTIFIER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 120:19: -> {subquery}? ALIAS[$id]
				if (subquery)
				{
					DebugLocation(120, 34);
					adaptor.AddChild(root_0, (object)adaptor.Create(ALIAS, id));

				}
				else // 121:5: -> IDENTIFIER[$id]
				{
					DebugLocation(121, 8);
					adaptor.AddChild(root_0, (object)adaptor.Create(IDENTIFIER, id));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LinqToQuerystring.g:122:5: DYNAMICIDENTIFIER
				{
				DebugLocation(122, 5);
				DYNAMICIDENTIFIER92=(IToken)Match(input,DYNAMICIDENTIFIER,Follow._DYNAMICIDENTIFIER_in_identifierpart939);  
				stream_DYNAMICIDENTIFIER.Add(DYNAMICIDENTIFIER92);



				{
				// AST REWRITE
				// elements: DYNAMICIDENTIFIER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 122:23: -> DYNAMICIDENTIFIER
				{
					DebugLocation(122, 26);
					adaptor.AddChild(root_0, stream_DYNAMICIDENTIFIER.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifierpart", 24);
			LeaveRule("identifierpart", 24);
			LeaveRule_identifierpart();
		}
		DebugLocation(122, 43);
		} finally { DebugExitRule(GrammarFileName, "identifierpart"); }
		return retval;

	}
	// $ANTLR end "identifierpart"

	partial void EnterRule_filteroperator();
	partial void LeaveRule_filteroperator();
	// $ANTLR start "filteroperator"
	// LinqToQuerystring.g:124:1: filteroperator : ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL );
	[GrammarRule("filteroperator")]
	private AstParserRuleReturnScope<object, IToken> filteroperator()
	{
		EnterRule_filteroperator();
		EnterRule("filteroperator", 25);
		TraceIn("filteroperator", 25);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set93 = default(IToken);

		object set93_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filteroperator");
		DebugLocation(124, 85);
		try
		{
			// LinqToQuerystring.g:125:2: ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL )
			DebugEnterAlt(1);
			// LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(125, 2);

			set93=(IToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANOREQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANOREQUAL)||input.LA(1)==NOTEQUALS)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set93));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filteroperator", 25);
			LeaveRule("filteroperator", 25);
			LeaveRule_filteroperator();
		}
		DebugLocation(125, 85);
		} finally { DebugExitRule(GrammarFileName, "filteroperator"); }
		return retval;

	}
	// $ANTLR end "filteroperator"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _param_in_prog72 = new BitSet(new ulong[]{0x520001806000002UL,0x42UL});
		public static readonly BitSet _70_in_prog75 = new BitSet(new ulong[]{0x520001806000000UL,0x2UL});
		public static readonly BitSet _param_in_prog78 = new BitSet(new ulong[]{0x520001806000002UL,0x42UL});
		public static readonly BitSet _orderby_in_param91 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _top_in_param95 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _skip_in_param99 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _filter_in_param103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_in_param107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _inlinecount_in_param111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expand_in_param115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ignored_in_param119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skip130 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _INT_in_skip133 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _TOP_in_top144 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _INT_in_top147 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _FILTER_in_filter158 = new BitSet(new ulong[]{0x72C539272077B000UL,0xB5UL});
		public static readonly BitSet _filterexpression_in_filter161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select172 = new BitSet(new ulong[]{0x400200000UL});
		public static readonly BitSet _propertyname_in_select175 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _73_in_select179 = new BitSet(new ulong[]{0x400200000UL});
		public static readonly BitSet _propertyname_in_select182 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _EXPAND_in_expand197 = new BitSet(new ulong[]{0x400200000UL});
		public static readonly BitSet _propertyname_in_expand200 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _73_in_expand204 = new BitSet(new ulong[]{0x400200000UL});
		public static readonly BitSet _propertyname_in_expand207 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount219 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ALLPAGES_in_inlinecount222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount227 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _NONE_in_inlinecount229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IGNORED_in_ignored239 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _IDENTIFIER_in_ignored241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orexpression_in_filterexpression255 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _SPACE_in_filterexpression259 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _OR_in_filterexpression262 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _SPACE_in_filterexpression265 = new BitSet(new ulong[]{0x72C539272077B000UL,0xB5UL});
		public static readonly BitSet _orexpression_in_filterexpression268 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _andexpression_in_orexpression282 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _SPACE_in_orexpression286 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _AND_in_orexpression289 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _SPACE_in_orexpression292 = new BitSet(new ulong[]{0x72C539272077B000UL,0xB5UL});
		public static readonly BitSet _andexpression_in_orexpression295 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _NOT_in_andexpression309 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _SPACE_in_andexpression312 = new BitSet(new ulong[]{0x72C439272077B000UL,0xB5UL});
		public static readonly BitSet _71_in_andexpression315 = new BitSet(new ulong[]{0x72C539272077B000UL,0xB5UL});
		public static readonly BitSet _filterexpression_in_andexpression317 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_andexpression320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_andexpression332 = new BitSet(new ulong[]{0x72C539272077B000UL,0xB5UL});
		public static readonly BitSet _filterexpression_in_andexpression334 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_andexpression337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_booleanexpression357 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _SPACE_in_booleanexpression365 = new BitSet(new ulong[]{0x200C018800000UL});
		public static readonly BitSet _EQUALS_in_booleanexpression370 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _NOTEQUALS_in_booleanexpression376 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _GREATERTHAN_in_booleanexpression382 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _GREATERTHANOREQUAL_in_booleanexpression388 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _LESSTHAN_in_booleanexpression394 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _LESSTHANOREQUAL_in_booleanexpression400 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _SPACE_in_booleanexpression403 = new BitSet(new ulong[]{0x72C439272077B000UL,0x35UL});
		public static readonly BitSet _atom_in_booleanexpression407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_atom459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_atom465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_in_atom470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_in_functioncall482 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_functioncall485 = new BitSet(new ulong[]{0x72C439272077B000UL,0x35UL});
		public static readonly BitSet _atom_in_functioncall487 = new BitSet(new ulong[]{0x0UL,0x300UL});
		public static readonly BitSet _73_in_functioncall491 = new BitSet(new ulong[]{0x72C439272077B000UL,0x35UL});
		public static readonly BitSet _atom_in_functioncall493 = new BitSet(new ulong[]{0x0UL,0x300UL});
		public static readonly BitSet _72_in_functioncall498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_accessor510 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_accessor523 = new BitSet(new ulong[]{0x8000060000004920UL});
		public static readonly BitSet _ANY_in_accessor528 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _ALL_in_accessor534 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _COUNT_in_accessor540 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _MAX_in_accessor546 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _MIN_in_accessor552 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _SUM_in_accessor558 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _AVERAGE_in_accessor564 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_accessor571 = new BitSet(new ulong[]{0x400000000UL,0x100UL});
		public static readonly BitSet _IDENTIFIER_in_accessor582 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_accessor584 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _SPACE_in_accessor586 = new BitSet(new ulong[]{0x72C539272077B000UL,0xB5UL});
		public static readonly BitSet _filterexpression_in_accessor588 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_accessor628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDERBY_in_orderby715 = new BitSet(new ulong[]{0x400200000UL});
		public static readonly BitSet _orderbylist_in_orderby718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist728 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _73_in_orderbylist731 = new BitSet(new ulong[]{0x400200000UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist734 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _propertyname_in_orderpropertyname745 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _SPACE_in_orderpropertyname768 = new BitSet(new ulong[]{0x80200UL});
		public static readonly BitSet _ASC_in_orderpropertyname773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderpropertyname779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_constant803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOOL_in_constant808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_constant813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_constant818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LONG_in_constant823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SINGLE_in_constant828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_in_constant833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_constant838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GUID_in_constant843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BYTE_in_constant848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_constant853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierpart_in_propertyname866 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_propertyname875 = new BitSet(new ulong[]{0x400200000UL});
		public static readonly BitSet _subpropertyname_in_propertyname879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_subpropertyname902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_identifierpart917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DYNAMICIDENTIFIER_in_identifierpart939 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  LinqToQuerystring 
